using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Text.RegularExpressions;
using System.Xml;

// NOTE:
//   Exit code '0' means finished normally
//   Exit code '1' means finished help screen
//   Exit code '6' means updated from GitHub
//   Exit code '99' means error occured

namespace searchsploit
{
    class Program
    {
        static int id = 0, file = 1, description = 2, col2 = 35, col1;
        static bool caseSensitivity = false, verbose = false, weblink = false, edbid = false, colour = true, filepath = true, nmap = false;
        static String csvPath = @".\files.csv";
        static List<String> terms = new List<String>();
        public static int UpdateCSV()
        {
            String URL = @"https://github.com/offensive-security/exploit-database/archive/master.zip";
            String FileName = @"master.zip";

            if (Directory.Exists(@".\platforms")) { Directory.Delete(@".\platforms",true); }
            if (File.Exists(@".\files.csv")) { File.Delete(@".\files.csv"); }
            if (Directory.Exists(@".\exploit-database-master")) { Directory.Delete(@".\exploit-database-master",true); }
            if (File.Exists(@".\master.zip")) { File.Delete(@".\master.zip"); }

            WebClient myWebClient = new WebClient();
            myWebClient.DownloadFile(URL, FileName);

            ZipFile.ExtractToDirectory(FileName,".");
            Directory.Move(@".\exploit-database-master\platforms", @".\platforms");
            File.Move(@".\exploit-database-master\files.csv", @".\files.csv");
            Directory.Delete(@".\exploit-database-master",true);
            File.Delete(@".\master.zip");

            Console.WriteLine("[*] Update finished.");
            return 6;
        }

        public static void printHeader()
        {
            drawline();
            if (weblink)
            {
                Console.WriteLine("{0,-" + col1 + "} | {1}", "Exploit Title", "URL");
                Console.WriteLine("{0,-" + col1 + "} | {1}", "", "");
            }
            else if (edbid)
            {
                Console.WriteLine("{0,-" + col1 + "} | {1}", "Exploit Title", "EDB-ID");
                Console.WriteLine("{0,-" + col1 + "} | {1}", "", "");
            }
            else
            {
                Console.WriteLine("{0,-" + col1 + "} | {1}", "Exploit Title", "Path");
                Console.WriteLine("{0,-" + col1 + "} | {1}", "", @".\platforms");
            }
            drawline();
        }

        public static int usage()
        {
            Console.WriteLine("  Usage: searchsploit [options] term1 [term2] ... [termN]");
            Console.WriteLine("Example:");
            Console.WriteLine("  searchsploit afd windows local");
            Console.WriteLine("  searchsploit -t oracle windows");
            Console.WriteLine("  searchsploit --nmap NmapScan.xml");
            Console.WriteLine();
            Console.WriteLine("=========");
            Console.WriteLine(" Options ");
            Console.WriteLine("=========");
            Console.WriteLine("   -c, --case     Perform a case-sensitive search (Default is insensitive).");
            Console.WriteLine("   -h, --help     Show this help screen.");
            Console.WriteLine("   -t, --title    Search just the exploit title (Default is title AND the file's path).");
            Console.WriteLine("   -u, --update   Update exploit database from git.");
            Console.WriteLine("   -v, --verbose  Verbose output. Title lines are allowed to overflow their columns.");
            Console.WriteLine("   -w, --www      Show URLs to Exploit-DB.com rather than local path.");
            Console.WriteLine("       --colour   Disable colour highlighting.");
            Console.WriteLine("       --id       Display EDB-ID value rather than local path.");
            Console.WriteLine("       --nmap     Display EDB-ID value rather than local path.");
            Console.WriteLine();
            Console.WriteLine("=======");
            Console.WriteLine(" Notes ");
            Console.WriteLine("=======");
            Console.WriteLine(" * Use any number of search terms, in any order.");
            Console.WriteLine(" * Search terms are not case sensitive, and order is irrelevant.");
            Console.WriteLine("   * Use '-c' if you wish to reduce results by case-sensitive searching.");
            Console.WriteLine("* Use '-t' to exclude the file's path to filter the search results.");
            Console.WriteLine("   * Could possibly remove false positives (especially when searching numbers).");
            Console.WriteLine(" * When updating from git or displaying help, search terms will be ignored.");
            Console.WriteLine();
            return 1;
        }

        public static void drawline()
        {
            for(int i = 0; i < Console.WindowWidth; i++)
            {
                Console.Write("-");
            }
        }

        public static void printColor(String line)
        {
            StringBuilder RegExTerms = new StringBuilder();
            MatchCollection Matches;
            for (int i = 0; i < terms.Count(); i++)
            {
                if (i == terms.Count() - 1)
                {
                    RegExTerms.Append(terms[i]);
                }
                else
                {
                    RegExTerms.Append(terms[i] + "|");
                }
            }
            if (caseSensitivity)
            {
                Matches = Regex.Matches(line, RegExTerms.ToString());
            }
            else
            {
                Matches = Regex.Matches(line, RegExTerms.ToString(), RegexOptions.IgnoreCase);
            }
            int start = 0;
            for (int x = 0; x < Matches.Count; x ++)
            {
                Match match = Matches[x];
                int Matchstart = match.Index;
                int Matchstop = match.Length;
                Console.Write(line.Substring(start, Matchstart - start));
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write(line.Substring(Matchstart, Matchstop));
                Console.ForegroundColor = ConsoleColor.Gray;
                start = Matchstart + Matchstop;
                if (x == Matches.Count - 1)
                {
                    Console.Write(line.Substring(start)+"\n");
                }
            }
        }

        public static void Search()
        {
            int counter = 0;
            string line;

            System.IO.StreamReader cvsFile = new System.IO.StreamReader(csvPath);
            while ((line = cvsFile.ReadLine()) != null)
            {
                if (line == "id,file,description,date,author,platform,type,port") { continue; }
                var items = line.Split(',');
                items[description] = items[description].Replace("\"", "");
                bool doesMatch = false;
                int matchCount = 0;
                string toMatch = items[description]+","+items[file];
                if (!filepath)
                {
                    toMatch = items[description];
                }
                foreach (String term in terms)
                {
                    if (caseSensitivity)
                    {
                        if (Regex.IsMatch(toMatch, term))
                        {
                            matchCount++;
                        }
                    }
                    else
                    {
                        if (Regex.IsMatch(toMatch, term, RegexOptions.IgnoreCase))
                        {
                            matchCount++;
                        }
                    }
                }
                if (matchCount == terms.Count())
                {
                    doesMatch = true;
                }
                if (doesMatch)
                {
                    if (!verbose)
                    {
                        if (items[description].Length > col1)
                        {
                            items[description] = items[description].Substring(0, col1);
                        }
                    }
                    if (weblink)
                    {
                        if (colour)
                        {
                            printColor(String.Format("{0,-" + col1 + "} | {1}", items[description], "https://www.exploit-db.com/exploits/" + items[file]));
                        }
                        else
                        {
                            Console.WriteLine("{0,-" + col1 + "} | {1}", items[description], "https://www.exploit-db.com/exploits/" + items[file]);
                        }
                    }
                    else if (edbid)
                    {
                        if (colour)
                        {
                            printColor(String.Format("{0,-" + col1 + "} | {1}", items[description], items[id]));
                        }
                        else
                        {
                            Console.WriteLine("{0,-" + col1 + "} | {1}", items[description], items[id]);
                        }
                    }
                    else
                    {
                        if (colour)
                        {
                            printColor(String.Format("{0,-" + col1 + "} | {1}", items[description], items[file]));
                        }
                        else
                        {
                            Console.WriteLine("{0,-" + col1 + "} | {1}", items[description], items[file]);
                        }
                    }
                }
                counter++;
            }
            cvsFile.Close();
            drawline();
        }

        public static void nmapParse(string xmlfile)
        {
            XmlTextReader reader = new XmlTextReader(xmlfile);
            terms = new List<String>();
            while (reader.Read())
            {
                String Product = "";
                String Version = "";
                if (reader.NodeType == XmlNodeType.Element && reader.Name == "service" && reader.HasAttributes)
                {
                    while (reader.MoveToNextAttribute())
                    {
                        switch (reader.Name.ToLower())
                        {
                            case "product":
                                Product = reader.Value;
                                break;
                            case "version":
                                Version = reader.Value;
                                break;
                        }
                    }
                    if (Product == "" && Version == "") { continue; }
                    if (Product.Contains(" "))
                    {
                        foreach (string tmp in Product.Split(' '))
                        {
                            terms.Add(tmp);
                        }
                    }
                    else
                    {
                        terms.Add(Product);
                    }
                    terms.Add(Version);
                }
            }
        }

        static int Main(string[] args)
        {
            string tmparg = "";
            if (args.Length == 0)
            {
                return usage();
            }
            else
            {
                foreach (string arg in args)
                {
                    switch (arg)
                    {
                        case "-c":
                        case "--case":
                            caseSensitivity = true;
                            break;
                        case "-h":
                        case "--help":
                        case "?":
                            return usage();
                        case "-t":
                        case "--title":
                            filepath = false;
                            break;
                        case "-u":
                        case "--update":
                            return UpdateCSV();
                        case "-v":
                        case "--verbose":
                            verbose = true;
                            break;
                        case "-w":
                        case "--www":
                            weblink = true;
                            break;
                        case "--colour":
                        case "--color":
                            colour = false;
                            break;
                        case "--id":
                            edbid = true;
                            break;
                        case "--nmap":
                            nmap = true;
                            tmparg = arg;
                            break;
                        default:
                            if (arg.Contains("-"))
                            {
                                break;
                            }
                            terms.Add(arg);
                            break;
                    }
                }
            }
            if (nmap)
            {
                string filename = args[args.ToList().IndexOf(tmparg) + 1];
                if (File.Exists(filename))
                {
                    nmapParse(filename);
                }
                else
                {
                    Console.WriteLine("Error: File Could not be found.");
                    return 99;
                }
            }
            if (weblink){ col2 = 45; }
            col1 = Console.WindowWidth - col2 - 1;

            printHeader();

            Search();

            Console.ReadLine();
            return 0;
        }
    }
}
